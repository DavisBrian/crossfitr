define([
  "jquery",
  "underscore"
  ], function($, _) {

  function getSiteHeaderHeight() {
    return $('#globalMenu').height() + $('#gamesMenu').height();
  }

  function getWindowOffsetWithHeader() {
    return $(window).scrollTop() + getSiteHeaderHeight();
  }

  $('.js-sticky-table').each(function() {

    var $this = $(this);

    if($this.find('thead').length > 0 && $this.find('th').length > 0) {
      // Clone <thead>
      var $window = $(window),
          $thead  = $this.find('thead').clone(),
          $col    = $this.find('thead, tbody').clone();

      // Add class, remove margins, reset width and wrap table
     $this.addClass('sticky-enabled').css({margin: 0, width: '100%'}).wrap('<div class="sticky-wrap" />');

     if($this.hasClass('overflow-y')) $this.removeClass('overflow-y').parent().addClass('overflow-y');

      // Create new sticky table head (basic)
      $this.after('<table class="sticky-thead" />');

      // If <tbody> contains <th>, then we create sticky column and intersect (advanced)
      if($this.find('tbody th').length > 0) {
        $this.after('<table class="sticky-col" /><table class="sticky-intersect" />');
      }

      // Create shorthand for things
      var $stickyHead  = $this.siblings('.sticky-thead'),
          $stickyCol   = $this.siblings('.sticky-col'),
          $stickyInsct = $this.siblings('.sticky-intersect'),
          $stickyWrap  = $this.parent('.sticky-wrap');

      $stickyHead.append($thead);

      $stickyCol.append($col).find('thead th:gt(0)').remove().end().find('tbody td').remove();

      $stickyInsct.html('<thead><tr><th>'+$this.find('thead th:first-child').html()+'</th></tr></thead>');

      // Set widths
      var setWidths = function () {

          $this.find('thead th').each(function (i) {
            var $this = $(this);
            $stickyHead.find('th').eq(i).width($this.width());
          }).end().find('tr').each(function (i) {
            var $this = $(this);
            $stickyCol.find('tr').eq(i).height($this.height());
          });

          // Set width of sticky table head
          $stickyHead.width($this.width());

          // Set width of sticky table col
          $stickyCol.find('th').add($stickyInsct.find('th')).width($this.find('thead th').width())
        },
        repositionStickyHead = function () {
          // Return value of calculated allowance
          var allowance = calcAllowance();

          // Check if wrapper parent is overflowing along the y-axis
          if($this.height() > $stickyWrap.height()) {
            // If it is overflowing (advanced layout)
            // Position sticky header based on wrapper scrollTop()
            if($stickyWrap.scrollTop() > 0) {
              // When top of wrapping parent is out of view
              $stickyHead.add($stickyInsct).css({
                opacity: 1,
                top: $stickyWrap.scrollTop()
              });
            } else {
              // When top of wrapping parent is in view
              $stickyHead.add($stickyInsct).css({
                opacity: 0,
                top: 0
              });
            }
          } else {
            // If it is not overflowing (basic layout)
            // Position sticky header based on viewport scrollTop
            if(getWindowOffsetWithHeader() > $this.offset().top && getWindowOffsetWithHeader() < $this.offset().top + $this.outerHeight() - allowance) {
              console.log('basic');
              // When top of viewport is in the table itself
              $stickyHead.add($stickyInsct).css({
                opacity: 1,
                top: (getWindowOffsetWithHeader() - $this.offset().top)
              });
            } else {
              console.log('basic else');
              // When top of viewport is above or below table
              $stickyHead.add($stickyInsct).css({
                opacity: 0,
                top: 0
              });
            }
          }
        },
        repositionStickyCol = function () {
          if($stickyWrap.scrollLeft() > 0) {
            // When left of wrapping parent is out of view
            $stickyCol.add($stickyInsct).css({
              opacity: 1,
              left: $stickyWrap.scrollLeft()
            });
          } else {
            // When left of wrapping parent is in view
            $stickyCol
            .css({ opacity: 0 })
            .add($stickyInsct).css({ left: 0 });
          }
        },
        calcAllowance = function () {
          var a = 0;
          // Calculate allowance
          $this.find('tbody tr:lt(2)').each(function () {
            a += $this.height();
          });

          // Set fail safe limit (last three row might be too tall)
          // Set arbitrary limit at 0.25 of viewport height, or you can use an arbitrary pixel value
          if(a > $window.height()*0.1) {
            a = $window.height()*0.1;
          }

          // Add the height of sticky header
          a += $stickyHead.height();
          return a;
        };

      setWidths();

      $this.parent('.sticky-wrap').scroll(_.throttle(function() {
        repositionStickyHead();
        repositionStickyCol();
      }, 50));

      $window.load(setWidths).resize(_.debounce(function () {
        setWidths();
        repositionStickyHead();
        repositionStickyCol();
      }, 50)).scroll(_.throttle(repositionStickyHead, 50));
    }
  });
});
